#!/usr/bin/env ruby

require "bundler/setup"
require "primes/matrix/matrix"
require "primes/generator"
require "optparse"

options = {}
spec = Gem::Specification::load("primes-generator.gemspec")
parser = OptionParser.new do |opt|
  opt.banner = "Usage #{spec.name} [options]"
  opt.define_head spec.summary
  opt.separator ""

  opt.on("-n NUM", "--numberSize NUM", Integer, "Size of the matrix(0 <= n <= #{Primes::Generator::MAX_SIZE})") do |n|
    options[:size] = n
  end

  opt.on("-h", "--help", "Display this screen") do |n|
    puts opt
    exit
  end
end

def iterative_mode
  n = nil
  error = false
  while n.nil?
    puts "Enter the value of n #{"* WRONG VALUE(0 <= n <= #{Primes::Generator::MAX_SIZE}) *" if error}:"
    n = gets.chomp
    n = /\A\d+\z/.match(n) ? n.to_i : nil
    error = true if n.nil? || n < 0 || n > Primes::Generator::MAX_SIZE
  end
  n
end

begin
  parser.parse!
  omitted_arg = options[:size].nil?
  options[:size] = iterative_mode if omitted_arg
  puts ""
  puts "n = #{options[:size]} #{" run the command #{File.basename($0)} --help for more details" if omitted_arg}"
  puts ""
  puts "Procesing data please wait ..." if options[:size] >= Primes::Generator::BIG_VALUE
  result = Primes::Matrix.create(options[:size])
  result.pretty_print
rescue OptionParser::InvalidArgument => e
  STDERR.puts "#{e.message}, run the command #{File.basename($0)} --help for more details"
rescue OptionParser::MissingArgument => e
  STDERR.puts "#{e.message}, run the command #{File.basename($0)} --help for more details"
rescue OptionParser::InvalidOption => e
  STDERR.puts "#{e.message}, run the command #{File.basename($0)} --help for more details"
rescue ArgumentError => e
  STDERR.puts "#{e.message}, run the command #{File.basename($0)} --help for more details"
rescue Primes::Matrix::InvalidSizeError => e
  STDERR.puts "#{e.message}, run the command #{File.basename($0)} --help for more details"
  #rescue Exception => e
  #  STDERR.puts "Sorry, there was an unexpected error #{e.message}"
end
